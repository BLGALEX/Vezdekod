import bpy
from mathutils import Vector;
from random import shuffle


# dsu for labyrinth generation
class DSU:
    def __init__(self, l, m, h):
        self.l = l
        self.m = m
        self.h = h
        self.a = [[[(x, y, z) for z in range(h)] for y in range(m)] for x in range(l)]
        self.w = [[[0 for z in range(h)] for y in range(m)] for x in range(l)]

    def get(self, x):
        if self.a[x[0]][x[1]][x[2]] != x:
            self.a[x[0]][x[1]][x[2]] = self.get(self.a[x[0]][x[1]][x[2]])
        return self.a[x[0]][x[1]][x[2]]

    def union(self, x, y):
        x = self.get(x)
        y = self.get(y)

        if self.w[x[0]][x[1]][x[2]] == self.w[y[0]][y[1]][y[2]]:
            self.a[x[0]][x[1]][x[2]] = y
            self.w[y[0]][y[1]][y[2]] += 1
        elif self.w[x[0]][x[1]][x[2]] < self.w[y[0]][y[1]][y[2]]:
            self.a[y[0]][y[1]][y[2]] = x
        else:
            self.a[x[0]][x[1]][x[2]] = y


def generate_field(l, m, h):
    d = DSU(l, m, h)
    field = [[[1 for z in range(h)] for y in range(m)] for x in range(l)]

    start = (0, m // 2, h // 2)
    finish = (l - 1, m // 2, h // 2)
    
    dd = [(start[0], start[1], start[2]),
         (start[0] + 1, start[1], start[2]),
         (start[0] + 1, start[1] - 1, start[2]),
         (finish[0], finish[1], finish[2]), 
         (finish[0] - 1, finish[1], finish[2]),
         (finish[0] - 1, finish[1] - 1, finish[2])]
        
    if m > 4:
        dd.append((start[0] + 1, start[1] + 1, start[2]))
        dd.append((finish[0] - 1, finish[1] + 1, finish[2]))
    
    if h > 4:
        dd.append((finish[0] - 1, finish[1], finish[2] + 1))
        dd.append((start[0] + 1, start[1], start[2] + 1))
    if h > 3:
        dd.append((finish[0] - 1, finish[1], finish[2] - 1))
        dd.append((start[0] + 1, start[1], start[2] - 1))
        
    for cell in dd:
        field[cell[0]][cell[1]][cell[2]] = 0

    st = set(dd)

    cells = [(x, y, z) for z in range(1, h - 1) for y in range(1, m - 1) for x in range(1, l - 1)]
    cells = list(filter(lambda cell: cell not in st, cells))
    shuffle(cells)

    for cell in cells:
        if cell != start and cell != finish:
            x, y, z = cell
            neighbours = [(x - 1, y, z), (x, y - 1, z), (x, y, z - 1),
                          (x + 1, y, z), (x, y + 1, z), (x, y, z + 1)]
            unions = []
            for neighbour in neighbours:
                nx, ny, nz = neighbour
                unions.append(neighbour)

            repeating = False
            for i in range(len(unions)):
                for j in range(i + 1, len(unions)):
                    repeating = repeating or (d.get(unions[i]) == d.get(unions[j]))

            if not repeating:
                field[x][y][z] = 0
                for c in unions:
                    if field[c[0]][c[1]][c[2]] == 0:
                        d.union(cell, c)

    return field


L = 10
M = 10
H = 4
f = generate_field(L, M, H)
print(f[3][3][0])
n = "cube";
bpy.ops.mesh.primitive_cube_add(size=1);
orig_cube = bpy.context.active_object;

for i in range(L):
    for j in range(M):
        for k in range(H):
            if f[i][j][k] == 1:
                m = orig_cube.data.copy();
                o = bpy.data.objects.new(n, m);
                if k == H-1 or k == 0:
                    ob = o
                    # Get material
                    mat = bpy.data.materials.get("Material")
                    if mat is None:
                        # create material
                        mat = bpy.data.materials.new(name="Material")                  # Assign it to object
                    if ob.data.materials:
                        # assign to 1st material slot
                        ob.data.materials[0] = mat
                    else:
                        # no slots
                        ob.data.materials.append(mat)
                o.location = Vector((i, j, k));
                bpy.context.collection.objects.link(o);

bpy.ops.object.delete();
